var NeedJump = false;  var is_jump_col = 1;  var lst_ma_nx_mon = [];  var lst_nx_mon = [];  function addItemLstNXMon(ma, text) {     lst_ma_nx_mon.push(ma);     lst_nx_mon.push(text);  } function checkMaExistsLstTextMa(ma, lstTextMa, charSplit) {     var lst_ma = lstTextMa.split(charSplit);     var index = jQuery.inArray(ma, lst_ma);     if (index > -1) return true;     else return false;  } function getTextNXMonByMa(ma) {     var index = jQuery.inArray(ma, lst_ma_nx_mon);     if (index != -1)         return lst_nx_mon[index];     else return "";  } function backRow(cell) {     var nextCell = $(cell).closest("td").prev().find($(cell).prop("tagName")).first();     if ($(nextCell).parent().css('display') == 'none') {         backRow(nextCell);     } else {         $(nextCell).focus();
        $(nextCell).select();
    }  } function nextRow(cell) {     var nextCell = $(cell).closest("td").next().find($(cell).prop("tagName")).first();     if ($(nextCell).parent().css('display') == 'none') {         nextRow(nextCell);     } else {         $(nextCell).focus();
        $(nextCell).select();
    }  } function backCol(cell, cellIndex) {     var nextCell = $(cell).closest('tr').prev().children().eq(cellIndex).find($(cell).prop("tagName"));     if ($(nextCell).parent().css('display') == 'none') {         backCol(nextCell, cellIndex);     } else {         $(nextCell).focus();
        $(nextCell).select();
    } } function nextCol(cell, cellIndex) {     var nextCell = $(cell).closest('tr').next().children().eq(cellIndex).find($(cell).prop("tagName"));     if ($(nextCell).parent().css('display') == 'none') {         nextCol(nextCell, cellIndex);     } else {         $(nextCell).focus();
        $(nextCell).select();
    } } function JumCell(cell, charCode) {     var cellIndex = $(cell).parent().index();     if (charCode == 37)         backRow(cell);     if (charCode == 38)         backCol(cell, cellIndex);     if (charCode == 39)         nextRow(cell);     if (charCode == 40)         nextCol(cell, cellIndex);     if (charCode == 35)         nextCol(cell, cellIndex);  } function JumCellDivInTD(cell, charCode) {     var cellIndex = $(cell).closest('td').index();     if (charCode == 37)         backRow(cell);     if (charCode == 39)         nextRow(cell);     if (charCode == 35)         nextCol(cell, cellIndex);     if (charCode == 9)         nextCol(cell, cellIndex);  } function SetGridHeight() {     try {         var viewportheight;         if (typeof window.innerWidth != 'undefined') {             viewportheight = window.innerHeight;         } else if (typeof document.documentElement != 'undefined' && typeof document.documentElement.clientWidth != 'undefined' && document.documentElement.clientWidth != 0) {             viewportheight = document.documentElement.clientHeight;         } else {             viewportheight = document.getElementsByTagName('body')[0].clientHeight;         }         var rgHeaderDiv = document.getElementsByClassName("rgHeaderDiv");         var rgDataDiv = document.getElementsByClassName("rgDataDiv");          var itemfilter = document.getElementsByClassName("item-filter");         var hitemfilter = 0;         try {             hitemfilter = $(itemfilter).height() + 30;         } catch (ex) {             hitemfilter = 0;         }         if ($(itemfilter) == null || $(itemfilter) == 'undefined' || $(itemfilter).height() == null || $(itemfilter).css('display') == 'none')             hitemfilter = 0;          var itemheader = document.getElementsByClassName("item-header");         var hitemheader = 0;         try {             hitemheader = $(itemheader).height();         } catch (ex) {             hitemheader = 0;         }         if ($(itemheader) == null || $(itemheader) == 'undefined' || $(itemheader).height() == null || $(itemheader).css('display') == 'none')             hitemheader = 0;          var banner = document.getElementById("banner");         var hbanner = 0;         try {             hbanner = $(banner).height();         } catch (ex) {             hbanner = 0;         }         if ($(banner) == null || $(banner) == 'undefined' || $(banner).height() == null || $(banner).css('display') == 'none')             hbanner = 0;         var tongHeight = 0;         tongHeight += hitemfilter + hitemheader + hbanner;         var i = 0;         rgHeaderDiv[i].style.marginRight = "0px";         for (i = 0; i < rgDataDiv.length; i++) {             var hrgPager = 0;             try {                 hrgPager = $("#ctl00_ContentPlaceHolder1_RadGrid" + (1 + i) + " .rgPager").height();             } catch (ex) {                 hrgPager = 0;             }         if ($("#ctl00_ContentPlaceHolder1_RadGrid" + (1 + i) + " .rgPager") == null || $("#ctl00_ContentPlaceHolder1_RadGrid" + (1 + i) + " .rgPager") == 'undefined' || $("#ctl00_ContentPlaceHolder1_RadGrid" + (1 + i) + " .rgPager").height() == null || $("#ctl00_ContentPlaceHolder1_RadGrid" + (1 + i) + " .rgPager").css('display') == 'none')             hrgPager = 0;             var viewportheightItem = viewportheight - tongHeight - $(rgHeaderDiv[i]).height() - hrgPager - 50;             if (viewportheightItem > 0 && viewportheightItem < $("#ctl00_ContentPlaceHolder1_RadGrid" + (1 + i) + "_ctl00").height()) {                rgHeaderDiv[i].style.marginRight = "16px";             } else {                 rgHeaderDiv[i].style.marginRight = "0px";             }             rgDataDiv[i].style.height = viewportheightItem + "px";         }     } catch (ex) {     }  } function resize() {     SetGridHeight();  } function setBorderRowGrid(grid, numberRow) {     try {         if (grid) {             var MasterTable = grid.get_masterTableView();             var Rows = MasterTable.get_dataItems();             for (var i = 0; i < Rows.length; i++) {                 var row = Rows[i];                 if ((1 + i) % numberRow == 0)                     row.get_element().className += " RowEndGroup";             }         }     } catch (ex) {      }  } $(document).ready(function () {     window.onresize = resize;     resize();  });  function ChangeValidValueNLPC(inputvalue) {     try {         switch (inputvalue) {             case "t": case "T":                 NeedJump = true; return "T"; break;             case "d": case "đ": case "D": case "Đ": case "Đd": case "ĐD":                 NeedJump = true; return "Đ"; break;             case "c": case "C":                 NeedJump = true; return "C"; break;             default: return ""; break;         }     }     catch (ex) { return ""; }  } function ChangeValidValueDGMH(inputvalue) {     try {         switch (inputvalue) {             case "t": case "T":                 NeedJump = true; return "T"; break;             case "h": case "H":                 NeedJump = true; return "H"; break;             case "c": case "C":                 NeedJump = true; return "C"; break;             default: return ""; break;         }     }     catch (ex) { return ""; }  } function ChangeValidValueHanhKiem(inputvalue) {     try {         switch (inputvalue.toUpperCase()) {             case "K":                 NeedJump = true; return "K"; break;             case "T":                 NeedJump = true; return "T"; break;             case "TB": case "B":                 NeedJump = true; return "TB"; break;             case "Y":                 NeedJump = true; return "Y"; break;             default: return "";         }     }     catch (ex) { return ""; }  } function ChangeValidValueHocLuc(inputvalue) {     try {         switch (inputvalue.toUpperCase()) {             case "G":                 NeedJump = true; return "G"; break;             case "K":                 NeedJump = true; return "K"; break;             case "E": case "KE": case "KEM":                 NeedJump = true; return "KEM"; break;             case "TB": case "T":                 NeedJump = true; return "TB"; break;             case "Y":                 NeedJump = true; return "Y"; break;             default: return "";         }     }     catch (ex) { return ""; }  } function ChangeValidValueDanhHieu(inputvalue) {     try {         switch (inputvalue.toUpperCase()) {             case "G": case "GI": case "GIO": case "GIOI":                 NeedJump = true; return "GIOI"; break;             case "T": case "TT":                 NeedJump = true; return "TT"; break;             default: return "";         }     }     catch (ex) { return ""; }  } function ChangeValidValueD_CD(inputvalue) {     try {         switch (inputvalue.toUpperCase()) {             case "C": case "CD": case "CÐ": case "CĐ":                 NeedJump = true; return "CÐ"; break;             case "D": case "Ð": case "Đ":                 NeedJump = true; return "Ð"; break;             case "M":                 NeedJump = true; return "M"; break;             default: return "";         }     }     catch (ex) { return ""; }  } function ChangeValidValueC_K(inputvalue) {     try {         switch (inputvalue.toUpperCase()) {             case "C": case "CÓ": case "1":                 NeedJump = true; return "Có"; break;             case "K": case "KHÔNG": case "0":                 NeedJump = true; return "Không"; break;             default: return "";         }     }     catch (ex) { return ""; }  } function ChangeValidValueRTC(inputvalue) {     try {         switch (inputvalue.toUpperCase()) {             case "RẤT TÍCH CỰC": case "R": case "3":                 NeedJump = true; return "Rất tích cực"; break;             case "TÍCH CỰC": case "T": case "2":                 NeedJump = true; return "Tích cực"; break;             case "CHƯA TÍCH CỰC": case "C": case "1":                 NeedJump = true; return "Chưa tích cực"; break;             default: return "";         }     }     catch (ex) { return ""; }  } function ChangeValidValueP_K(inputvalue) {     try {         switch (inputvalue.toUpperCase()) {             case "P":                 NeedJump = true; return "P"; break;             case "K":                 NeedJump = true; return "K"; break;             default: return "";         }     }     catch (ex) { return ""; }  } function ChangeValidValue0_10(inputvalue) {     try {         //var i = parseFloat(inputvalue);         //if (isNaN(i) || (i < 0) || (i > 100)) return "";         //if (i > 100) i = i / 10;         //// lam tron so den 0.5         //if (i.toString().length > 3) return "";         //if (i.toString() + "." == inputvalue) return inputvalue;         //return i.toString();         var i = parseFloat(inputvalue);         if (isNaN(i) || (i < 0) || (i > 1000)) return "";         if (i > 100) i = i / 100;         // lam tron so den 0.05         if (i.toString().length > 4) return "";         if (i.toString() + "." == inputvalue) return inputvalue;         return i.toString();     }     catch (ex) { return ""; }  } function DiemChan10(inputvalue) {     try {         var i = parseInt(inputvalue);         if ((!isNaN(i) && i < 10 && i.length > 2) || (!isNaN(i) && i > 11) || (!isNaN(i) && i <= 0) || (isNaN(i))) return "";         else if (!isNaN(i) && i == 10) {             NeedJump = true; return 10;         }         else if (!isNaN(i) && i == 11) {             NeedJump = true; return 1;         }         else {             if (i > 1)                 NeedJump = true;             return i;         }     }     catch (ex) { return ""; }  } function openRadWin(url, sub_w, sub_h, is_fix) {     var viewportwidth;     var viewportheight;     if (typeof window.innerWidth != 'undefined') {         viewportwidth = window.innerWidth,             viewportheight = window.innerHeight;     } else if (typeof document.documentElement != 'undefined' && typeof document.documentElement.clientWidth != 'undefined' && document.documentElement.clientWidth != 0) {         viewportwidth = document.documentElement.clientWidth, viewportheight = document.documentElement.clientHeight;     } else {         viewportwidth = document.getElementsByTagName('body')[0].clientWidth,             viewportheight = document.getElementsByTagName('body')[0].clientHeight;     }     if (viewportwidth > 1000)         viewportwidth = viewportwidth - sub_w;     if (is_fix == 1)          radopen(url, "RadWindow1", sub_w, sub_h);     else     radopen(url, "RadWindow1", viewportwidth, viewportheight - sub_h);  } $(document).on('mouseover', '.rgMasterTable tbody tr', function () {     $(this).addClass("rgSelectedRowHover");  });  $(document).on('mouseout', '.rgMasterTable tbody tr', function () {     $(this).removeClass("rgSelectedRowHover");  });  function createAutocomplateMaNX(inputClass, linkData, textSpace="") {     var ajax = new XMLHttpRequest();     ajax.open("GET", linkData, true);     ajax.onload = function () {         var list = JSON.parse(ajax.responseText).map(function (i) { return i.name; });         $('.' + inputClass).each(function (i, obj) {             new Awesomplete(this, {                 list: list,                 filter: function (text, input) {                     return Awesomplete.FILTER_CONTAINS(text, input.match(/[^,+.+:+@]*$/)[0]);                 },                 maxItems:10,                 item: function (text, input) {                     return Awesomplete.ITEM(text, input.match(/[^,+.+:+@]*$/)[0]);                 },                  replace: function (text) {                     var before = this.input.value.match(/^.+,\s*|/)[0];                     var str = this.input.value;                     var indexLast = str.lastIndexOf(".");                     if (str.lastIndexOf(",") > indexLast) indexLast = str.lastIndexOf(",");                     if (str.lastIndexOf(":") > indexLast) indexLast = str.lastIndexOf(":");                     if (str.lastIndexOf("@") > indexLast) indexLast = str.lastIndexOf("@") - 1;                     if (indexLast < str.length)                         before = str.substring(0, indexLast + 1);                      var indexMa = text.indexOf("/");                     var valNew = text.substring(indexMa + 1, text.length)                     if (indexLast > 0 && (str[indexLast] == "," || str[indexLast + 1] == "@"))                         var valNew = valNew.charAt(0).toLowerCase() + valNew.substr(1);                      this.input.value = before + textSpace + valNew + ",";                 }             });         });     };     ajax.send();  } var delete_cookie = function (name) {     document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';  };   function logout(url) {     delete_cookie('MyCookieOnedu');     document.location.href = url;  }